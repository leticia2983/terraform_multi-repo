# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#name: "creating RG using terraform"
#trigger:
#  - main
#
#pool:
#  vmImage: ubuntu-latest
#
#
stages:
 
        
  - stage: Validation
    displayName: 'Validation of terraform plan'
    jobs:
      - job: waitForValidation
        displayName: Please check for terraform plan
        pool: server
        timeoutInMinutes: 20 # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 20 # task times out in 1 day
            inputs:
              notifyUsers: |
                nevillegoa@gmail.com
                neville_ba@outlook.com
              instructions: 'Please validate the Terraform Plan and if you are ok then resume'
#
#  - stage: terraform_apply
#    jobs:
#      - job: apply
#        displayName: 'terraform apply'
#        steps:
#          
          
          #          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
          #            displayName: 'Install Terraform'
          #            inputs:
          #              terraformVersion: "1.5.0"


#          - task: TerraformCLI@0
#            displayName: 'terraform init'
#            inputs:
#              command: init
#              backendType: azurerm
#              # Service connection to authorize backend access. Supports Subscription & Management Group Scope
#              backendServiceArm: 'terra_beginner_svc'
#              # Subscription id of the target backend. This can be used to specify the subscription when using Management Group scoped
#              # Service connection or to override the subscription id defined in a Subscription scoped service connection
#              backendAzureRmSubscriptionId: 'xxxxxxxx'
#              # create backend storage account if doesn't exist
#              ensureBackend: true
#              backendAzureRmResourceGroupName: 'RGinfra-platform-rg-prod11'
#              # azure location shortname of the backend resource group and storage account
#              backendAzureRmResourceGroupLocation: 'uaenorth'
#              backendAzureRmStorageAccountName: 'infratfstate12'
#              # azure storage account sku, used when creating the storage account
#              backendAzureRmStorageAccountSku: 'Standard_LRS'
#              # azure blob container to store the state file
#              backendAzureRmContainerName: 'mytfstate12'
#              # azure blob file name
#              backendAzureRmKey: myinfrax12.tfstate
#              workingDirectory: 'terraform'
#          
#          
          
          #
          #          - task: DownloadPipelineArtifact@2
          #            inputs:
          #              artifact: tfplan
          #              patterns: '**/*.js'
          #              commandOptions: '$(System.DefaultWorkingDirectory)/terraform.tfplan'
          #              workingDirectory: 'terraform'


#          -  download: current
#             artifact: 'tfplan'
#             name: downloadPlanfolder
#
#

#
#          - task: TerraformCLI@0
#            displayName: 'terraform apply'
#            #            condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
#            inputs:
#              command: apply
#              environmentServiceName: 'terra_beginner_svc'
#
#              commandOptions: '$(Pipeline.Workspace)/tfplan/terraform.tfplan'
#              workingDirectory: 'terraform'
#              allowTelemetryCollection: true
#          
